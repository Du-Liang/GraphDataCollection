#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import MySQLdb
import json
import sys
import os

db = MySQLdb.connect(
    host = "localhost", port = 3306, user = "root", 
    passwd = "123456", db = "net_test", charset = "utf8"
    )

cursor = db.cursor()

def err_log():
    print "error"
    error_info = sys.exc_info()
    if len(error_info) > 1:
        print(str(error_info[0]) + ' ' + str(error_info[1]))

def getMalId(i):
    try:
        cursor.execute("""
        select id from Malware where origin_id = {x};
        """.format(x = i[0]))
        res = cursor.fetchone()
        if res != None:
            return res[0]
        else:
            return None
    except:
        err_log()
        return None

def getOSId(i):
    try:
        cursor.execute("""
        select id from OS where Name = "{x}";
        """.format(x = i[1]))
        res = cursor.fetchone()
        if res != None:
            return res[0]
        else:
            return None
    except:
        err_log()
        return None

def InsertOS(i):
    try:
        cursor.execute("""
        insert into `OS` (`Name`) values ("{x}")
        """.format(x = i[1]))
        db.commit()
        cursor.execute("""
        select id from `OS` where Name = "{x}"
        """.format(x = i[1]))
        res = cursor.fetchone()
        if res != None:
            return res[0]
        else:
            return None
    except:
        err_log()
        db.rollback()
        return None

# 直接插，表中已经设置了组合键的唯一性约束
def insertVertex(i, t):
    try:
        sql = """
        insert into `vertex` (`type`, `id_search`) values ({m}, {n});
        """.format(m = t, n = i)
        print sql
        cursor.execute(sql)
        db.commit()
    except:
        err_log()
        db.rollback()

def getVertexId(i, t):
    try:
        sql = """
        select id from `vertex` where type = {m} and id_search = {n};
        """.format(m = t, n = i)
        print sql
        cursor.execute(sql)
        res = cursor.fetchone()
        if res != None:
            return res[0]
        else:
            return None 
    except:
        err_log()
        return None
    

def insertEdge(inId, outId, rel):
    try:
        sql = """
        insert into `Edges` (`type`, `in_vertex_id`, `out_vertex_id`) values ("{relation}", {m}, {n});
        """.format(relation = rel, m = inId, n = outId)
        print sql
        cursor.execute(sql)
        db.commit()
    except:
        err_log()
        db.rollback()

def UpdateRelation(MalId, OSId):
    print "inserting..."
    print MalId
    print OSId
    insertVertex(MalId, 6)
    insertVertex(OSId, 7)
    outId = getVertexId(MalId, 6)
    inId = getVertexId(OSId, 7)
    print outId
    print inId
    if outId != None and inId != None:
        insertEdge(inId, outId, "affect")
    else:
        print "fail to insert an edge"

# 处理Malware与OS的关系，生成 顶点-边-顶点 的关系
try:
    cursor.execute("""
    select id, System_Affected from `symantec` where System_Affected is not null
    """)
    data = cursor.fetchall()
    for item in data:
        MalId = getMalId(item)
        OSId = getOSId(item)
        if MalId == None: # Malware表中都没有出现，略过
            continue
        if OSId == None: # 这是一个新的OS，插入OS，并且拿到它的OSId
            OSId = InsertOS(item)
        if MalId != None and OSId != None: # 处理边表和顶点表之前再确认一下
            UpdateRelation(MalId, OSId)
except:
    err_log()

db.close()